{"version":3,"file":"bundle.js","sources":["../node_modules/idb-keyval/dist/index.js","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/safari-14-idb-fix/dist/index.js","../node_modules/debounce/index.js"],"sourcesContent":["import safariFix from 'safari-14-idb-fix';\n\nfunction promisifyRequest(request) {\n    return new Promise((resolve, reject) => {\n        // @ts-ignore - file size hacks\n        request.oncomplete = request.onsuccess = () => resolve(request.result);\n        // @ts-ignore - file size hacks\n        request.onabort = request.onerror = () => reject(request.error);\n    });\n}\nfunction createStore(dbName, storeName) {\n    const dbp = safariFix().then(() => {\n        const request = indexedDB.open(dbName);\n        request.onupgradeneeded = () => request.result.createObjectStore(storeName);\n        return promisifyRequest(request);\n    });\n    return (txMode, callback) => dbp.then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));\n}\nlet defaultGetStoreFunc;\nfunction defaultGetStore() {\n    if (!defaultGetStoreFunc) {\n        defaultGetStoreFunc = createStore('keyval-store', 'keyval');\n    }\n    return defaultGetStoreFunc;\n}\n/**\n * Get a value by its key.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction get(key, customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => promisifyRequest(store.get(key)));\n}\n/**\n * Set a value with a key.\n *\n * @param key\n * @param value\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction set(key, value, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.put(value, key);\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Set multiple values at once. This is faster than calling set() multiple times.\n * It's also atomic â€“ if one of the pairs can't be added, none will be added.\n *\n * @param entries Array of entries, where each entry is an array of `[key, value]`.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction setMany(entries, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        entries.forEach((entry) => store.put(entry[1], entry[0]));\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Get multiple values by their keys\n *\n * @param keys\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction getMany(keys, customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => Promise.all(keys.map((key) => promisifyRequest(store.get(key)))));\n}\n/**\n * Update a value. This lets you see the old value and update it as an atomic operation.\n *\n * @param key\n * @param updater A callback that takes the old value and returns a new value.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction update(key, updater, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => \n    // Need to create the promise manually.\n    // If I try to chain promises, the transaction closes in browsers\n    // that use a promise polyfill (IE10/11).\n    new Promise((resolve, reject) => {\n        store.get(key).onsuccess = function () {\n            try {\n                store.put(updater(this.result), key);\n                resolve(promisifyRequest(store.transaction));\n            }\n            catch (err) {\n                reject(err);\n            }\n        };\n    }));\n}\n/**\n * Delete a particular key from the store.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction del(key, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.delete(key);\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Delete multiple keys at once.\n *\n * @param keys List of keys to delete.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction delMany(keys, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        keys.forEach((key) => store.delete(key));\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Clear all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction clear(customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.clear();\n        return promisifyRequest(store.transaction);\n    });\n}\nfunction eachCursor(customStore, callback) {\n    return customStore('readonly', (store) => {\n        // This would be store.getAllKeys(), but it isn't supported by Edge or Safari.\n        // And openKeyCursor isn't supported by Safari.\n        store.openCursor().onsuccess = function () {\n            if (!this.result)\n                return;\n            callback(this.result);\n            this.result.continue();\n        };\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Get all keys in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction keys(customStore = defaultGetStore()) {\n    const items = [];\n    return eachCursor(customStore, (cursor) => items.push(cursor.key)).then(() => items);\n}\n/**\n * Get all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction values(customStore = defaultGetStore()) {\n    const items = [];\n    return eachCursor(customStore, (cursor) => items.push(cursor.value)).then(() => items);\n}\n/**\n * Get all entries in the store. Each entry is an array of `[key, value]`.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction entries(customStore = defaultGetStore()) {\n    const items = [];\n    return eachCursor(customStore, (cursor) => items.push([cursor.key, cursor.value])).then(() => items);\n}\n\nexport { clear, createStore, del, delMany, entries, get, getMany, keys, promisifyRequest, set, setMany, update, values };\n","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","/**\n * Work around Safari 14 IndexedDB open bug.\n *\n * Safari has a horrible bug where IDB requests can hang while the browser is starting up. https://bugs.webkit.org/show_bug.cgi?id=226547\n * The only solution is to keep nudging it until it's awake.\n */\nfunction idbReady() {\n    var isSafari = !navigator.userAgentData &&\n        /Safari\\//.test(navigator.userAgent) &&\n        !/Chrom(e|ium)\\//.test(navigator.userAgent);\n    // No point putting other browsers or older versions of Safari through this mess.\n    if (!isSafari || !indexedDB.databases)\n        return Promise.resolve();\n    var intervalId;\n    return new Promise(function (resolve) {\n        var tryIdb = function () { return indexedDB.databases().finally(resolve); };\n        intervalId = setInterval(tryIdb, 100);\n        tryIdb();\n    }).finally(function () { return clearInterval(intervalId); });\n}\n\nexport default idbReady;\n","/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing. The function also has a property 'clear' \n * that is a function which will clear the timer to prevent previously scheduled executions. \n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\nfunction debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = Date.now() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    }\n  };\n\n  var debounced = function(){\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n\n  debounced.clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n  \n  debounced.flush = function() {\n    if (timeout) {\n      result = func.apply(context, args);\n      context = args = null;\n      \n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return debounced;\n};\n\n// Adds compatibility for ES modules\ndebounce.debounce = debounce;\n\nmodule.exports = debounce;\n"],"names":["defaultGetStoreFunc","_typeof","obj","Symbol","iterator","constructor","prototype","promisifyRequest","request","Promise","resolve","reject","oncomplete","onsuccess","result","onabort","onerror","error","createStore","dbName","storeName","intervalId","dbp","navigator","userAgentData","test","userAgent","indexedDB","databases","tryIdb","finally","setInterval","clearInterval","then","open","onupgradeneeded","createObjectStore","txMode","callback","db","transaction","objectStore","defaultGetStore","get","key","customStore","store","setMany","entries","forEach","entry","put","eachCursor","openCursor","this","continue","debounce","func","wait","immediate","timeout","args","context","timestamp","later","last","Date","now","setTimeout","apply","debounced","arguments","callNow","clear","clearTimeout","flush","debounce_1","items","cursor","push","keys","delete"],"mappings":"IAkBIA,6wDClBW,SAASC,EAAQC,UAGvBD,EAAU,mBAAqBE,QAAU,iBAAmBA,OAAOC,SAAW,SAAUF,iBAC/EA,GACZ,SAAUA,UACLA,GAAO,mBAAqBC,QAAUD,EAAIG,cAAgBF,QAAUD,IAAQC,OAAOG,UAAY,gBAAkBJ,GACvHD,EAAQC,GDLb,SAASK,EAAiBC,UACf,IAAIC,SAAQ,SAACC,EAASC,GAEzBH,EAAQI,WAAaJ,EAAQK,UAAY,kBAAMH,EAAQF,EAAQM,SAE/DN,EAAQO,QAAUP,EAAQQ,QAAU,kBAAML,EAAOH,EAAQS,WAGjE,SAASC,EAAYC,EAAQC,OEGrBC,EFFEC,IEJUC,UAAUC,eACtB,WAAWC,KAAKF,UAAUG,aACzB,iBAAiBD,KAAKF,UAAUG,YAEnBC,UAAUC,UAGrB,IAAInB,SAAQ,SAAUC,OACrBmB,EAAS,kBAAqBF,UAAUC,YAAYE,QAAQpB,IAChEW,EAAaU,YAAYF,EAAQ,KACjCA,OACDC,SAAQ,kBAAqBE,cAAcX,MANnCZ,QAAQC,WFDKuB,MAAK,eACnBzB,EAAUmB,UAAUO,KAAKf,UAC/BX,EAAQ2B,gBAAkB,kBAAM3B,EAAQM,OAAOsB,kBAAkBhB,IAC1Db,EAAiBC,aAErB,SAAC6B,EAAQC,UAAahB,EAAIW,MAAK,SAACM,UAAOD,EAASC,EAAGC,YAAYpB,EAAWiB,GAAQI,YAAYrB,QAGzG,SAASsB,WACA1C,IACDA,EAAsBkB,EAAY,eAAgB,WAE/ClB,EAQX,SAAS2C,EAAIC,OAAKC,yDAAcH,WACrBG,EAAY,YAAY,SAACC,UAAUvC,EAAiBuC,EAAMH,IAAIC,OAsBzE,SAASG,EAAQC,OAASH,yDAAcH,WAC7BG,EAAY,aAAa,SAACC,UAC7BE,EAAQC,SAAQ,SAACC,UAAUJ,EAAMK,IAAID,EAAM,GAAIA,EAAM,OAC9C3C,EAAiBuC,EAAMN,gBAuEtC,SAASY,EAAWP,EAAaP,UACtBO,EAAY,YAAY,SAACC,UAG5BA,EAAMO,aAAaxC,UAAY,WACtByC,KAAKxC,SAEVwB,EAASgB,KAAKxC,aACTA,OAAOyC,aAEThD,EAAiBuC,EAAMN,gBG5HtC,SAASgB,EAASC,EAAMC,EAAMC,OACxBC,EAASC,EAAMC,EAASC,EAAWjD,WAG9BkD,QACHC,EAAOC,KAAKC,MAAQJ,EAEpBE,EAAOP,GAAQO,GAAQ,EACzBL,EAAUQ,WAAWJ,EAAON,EAAOO,IAEnCL,EAAU,KACLD,IACH7C,EAAS2C,EAAKY,MAAMP,EAASD,GAC7BC,EAAUD,EAAO,OAXnB,MAAQH,IAAMA,EAAO,SAgBrBY,EAAY,WACdR,EAAUR,KACVO,EAAOU,UACPR,EAAYG,KAAKC,UACbK,EAAUb,IAAcC,SACvBA,IAASA,EAAUQ,WAAWJ,EAAON,IACtCc,IACF1D,EAAS2C,EAAKY,MAAMP,EAASD,GAC7BC,EAAUD,EAAO,MAGZ/C,UAGTwD,EAAUG,MAAQ,WACZb,IACFc,aAAad,GACbA,EAAU,OAIdU,EAAUK,MAAQ,WACZf,IACF9C,EAAS2C,EAAKY,MAAMP,EAASD,GAC7BC,EAAUD,EAAO,KAEjBa,aAAad,GACbA,EAAU,OAIPU,EAITd,EAASA,SAAWA,MAEpBoB,EAAiBpB,+EH6EjB,eAAcX,yDAAcH,IAClBmC,EAAQ,UACPzB,EAAWP,GAAa,SAACiC,UAAWD,EAAME,KAAKD,EAAOlC,QAAMX,MAAK,kBAAM4C,8KArClF,SAAiBG,iEAAoBtC,KACd,aAAa,SAACI,UAC7BkC,EAAK/B,SAAQ,SAACL,UAAQE,EAAMmC,OAAOrC,MAC5BrC,EAAiBuC,EAAMN"}